import random
import logging
from typing import List, Tuple, Set

from models import User, ParticipationStatus
from database import Database

logger = logging.getLogger(__name__)


class MatchingResult:
    """–†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∏–Ω–≥–∞"""
    def __init__(self):
        self.matches: List[Tuple[User, User]] = []
        self.unmatched_users: List[User] = []
        self.users_with_recent_matches: List[User] = []


class MatchingService:
    def __init__(self, database: Database):
        self.db = database

    async def start_weekly_matching_session(self, deadline_hours: int = 24) -> int:
        """–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –º–∞—Ç—á–∏–Ω–≥–∞ —Å –¥–µ–¥–ª–∞–π–Ω–æ–º –¥–ª—è —Å–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –º–∞—Ç—á–∏–Ω–≥–∞
        session_id = await self.db.create_matching_session(deadline_hours)

        # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "—Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –∫–∞–∂–¥—ã–π —Ä–∞–∑"
        ask_participants = await self.db.get_users_by_participation_status(
            ParticipationStatus.ASK_EACH_TIME
        )

        # –î–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ "—Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –∫–∞–∂–¥—ã–π —Ä–∞–∑" —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏
        # –≤ —Ç–∞–±–ª–∏—Ü–µ pending_matches
        await self._create_pending_matches(ask_participants)

        logger.info(f"–ù–∞—á–∞—Ç–∞ —Å–µ—Å—Å–∏—è –º–∞—Ç—á–∏–Ω–≥–∞ #{session_id}")
        logger.info(f"–°–æ–∑–¥–∞–Ω–æ {len(ask_participants)} –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ "
                    f"–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—á–∞—Å—Ç–∏—è")
        logger.info(f"–î–µ–¥–ª–∞–π–Ω –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {deadline_hours} —á–∞—Å–æ–≤")

        return session_id

    async def create_weekly_matches(self) -> MatchingResult:
        """–°–æ–∑–¥–∞—Ç—å –ø–∞—Ä—ã –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –º—ç—Ç—á–∏–Ω–≥–∞ –∏–∑ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–≤—Å–µ–≥–¥–∞ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å"
        always_participants = await self.db.get_users_by_participation_status(
            ParticipationStatus.ALWAYS
        )

        # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–≤—à–∏—Ö —É—á–∞—Å—Ç–∏–µ
        confirmed_participants = await self.db.get_confirmed_participants()

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        all_participants = always_participants + confirmed_participants

        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—ã –∏–∑ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        result = await self._create_matches_from_users(all_participants)

        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É pending_matches –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä
        await self.db.clear_pending_matches()

        logger.info(f"–°–æ–∑–¥–∞–Ω–æ {len(result.matches)} –ø–∞—Ä –¥–ª—è –º–∞—Ç—á–∏–Ω–≥–∞")
        logger.info(f"–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ '–≤—Å–µ–≥–¥–∞': {len(always_participants)}")
        logger.info(f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏–≤—à–∏—Ö —É—á–∞—Å—Ç–∏–µ: {len(confirmed_participants)}")
        logger.info(f"–ù–µ –Ω–∞—à–ª–æ—Å—å –ø–∞—Ä—ã –¥–ª—è {len(result.unmatched_users)} "
                    f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        logger.info(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ –∏–∑-–∑–∞ –Ω–µ–¥–∞–≤–Ω–∏—Ö –º–∞—Ç—á–µ–π: "
                    f"{len(result.users_with_recent_matches)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

        return result

    async def _create_pending_matches(self, users: List[User]):
        """–°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å–∏ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        for user in users:
            await self.db.create_pending_match(user.user_id)

    async def _create_matches_from_users(self, users: List[User]) -> MatchingResult:
        """–°–æ–∑–¥–∞—Ç—å –ø–∞—Ä—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        result = MatchingResult()

        if len(users) < 2:
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –º–µ–Ω—å—à–µ 2, –Ω–∏–∫–æ–≥–æ –Ω–µ–ª—å–∑—è —Å–º–∞—Ç—á–∏—Ç—å
            result.unmatched_users = users
            return result

        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
        shuffled_users = users.copy()
        random.shuffle(shuffled_users)

        matched_user_ids: Set[int] = set()

        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—ã
        for i in range(0, len(shuffled_users) - 1, 2):
            user1 = shuffled_users[i]
            user2 = shuffled_users[i + 1]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∏ –ª–∏ —ç—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –ø–∞—Ä–µ –Ω–µ–¥–∞–≤–Ω–æ
            if not await self._were_matched_recently(user1.user_id, user2.user_id):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                await self.db.create_match(user1.user_id, user2.user_id)
                result.matches.append((user1, user2))
                matched_user_ids.add(user1.user_id)
                matched_user_ids.add(user2.user_id)
            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ–¥–∞–≤–Ω–æ –±—ã–ª–∏ –≤ –ø–∞—Ä–µ, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ —Å–ø–∏—Å–æ–∫ —Å –Ω–µ–¥–∞–≤–Ω–∏–º–∏ –º–∞—Ç—á–∞–º–∏
                result.users_with_recent_matches.extend([user1, user2])

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –±—ã–ª–∏ —Å–º–∞—Ç—á–µ–Ω—ã
        for user in shuffled_users:
            if user.user_id not in matched_user_ids:
                # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ –µ—Å—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ä—ã,
                # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –∫ —Å–ª—É—á–∞–π–Ω–æ–π –ø–∞—Ä–µ (–≥—Ä—É–ø–ø–∞ –∏–∑ 3 —á–µ–ª–æ–≤–µ–∫)
                if (len(shuffled_users) % 2 == 1 and result.matches and
                    user == shuffled_users[-1]):
                    # –≠—Ç–æ —Å–ª—É—á–∞–π —Å –Ω–µ—á–µ—Ç–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø—É –∏–∑ 3 —á–µ–ª–æ–≤–µ–∫
                    random_match_index = random.randint(0, len(result.matches) - 1)
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} –¥–æ–±–∞–≤–ª–µ–Ω –∫ "
                               f"—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä–µ (–≥—Ä—É–ø–ø–∞ –∏–∑ 3 —á–µ–ª–æ–≤–µ–∫)")
                    # –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –≥—Ä—É–ø–ø –∏–∑ 3 —á–µ–ª–æ–≤–µ–∫ –≤ –±—É–¥—É—â–µ–º
                    result.unmatched_users.append(user)
                else:
                    result.unmatched_users.append(user)

        return result

    async def _were_matched_recently(self, user1_id: int, user2_id: int, days: int = 30) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –±—ã–ª–∏ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –ø–∞—Ä–µ –Ω–µ–¥–∞–≤–Ω–æ"""
        return await self.db.check_recent_match(user1_id, user2_id, days)

    async def process_pending_confirmations(self) -> List[User]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —É—á–∞—Å—Ç–∏–µ"""
        return await self.db.get_pending_participants()

    async def confirm_participation(self, user_id: int, wants_to_participate: bool):
        """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if wants_to_participate:
            await self.db.confirm_pending_participation(user_id)
        else:
            await self.db.decline_pending_participation(user_id)

    async def create_matches_from_confirmed_participants(self) -> MatchingResult:
        """–°–æ–∑–¥–∞—Ç—å –ø–∞—Ä—ã –∏–∑ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–≤—à–∏—Ö —É—á–∞—Å—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        confirmed_users = await self.db.get_confirmed_participants()
        result = await self._create_matches_from_users(confirmed_users)

        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É pending_matches –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä
        await self.db.clear_pending_matches()

        return result


def format_user_profile(user: User, match_id: int = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    profile_text = f"üë§ –í–∞—à–∞ –ø–∞—Ä–∞ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é:\n\n"
    profile_text += f"**{user.first_name}"

    if user.last_name:
        profile_text += f" {user.last_name}"

    if user.username:
        profile_text += f"** (@{user.username})"
    else:
        profile_text += "**"

    profile_text += f"\n\n"

    if user.bio:
        profile_text += f"üìù –û —Å–µ–±–µ: {user.bio}\n\n"

    if user.interests:
        profile_text += f"üéØ –ò–Ω—Ç–µ—Ä–µ—Å—ã: {user.interests}\n\n"

    profile_text += f"üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥—É –∏ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å –æ –≤—Å—Ç—Ä–µ—á–µ!\n"
    profile_text += f"‚òï –£–¥–∞—á–Ω–æ–≥–æ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞!\n\n"

    if match_id:
        profile_text += (
            f"üìã –ü–æ—Å–ª–µ –≤—Å—Ç—Ä–µ—á–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–º–µ—Ç—å—Ç–µ —Å–æ—Å—Ç–æ—è–ª–∞—Å—å –ª–∏ –æ–Ω–∞, "
            f"—ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–¥–±–æ—Ä–∞ –ø–∞—Ä."
        )

    return profile_text


def format_no_match_message(user: User) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ –ø–∞—Ä—ã"""
    message_text = f"‚òï –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
    message_text += f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ –º—ã –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–∞–º "
    message_text += f"–ø–∞—Ä—É –¥–ª—è Random Coffee.\n\n"
    message_text += f"–≠—Ç–æ –º–æ–≥–ª–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –ø–æ –æ–¥–Ω–æ–π –∏–∑ –ø—Ä–∏—á–∏–Ω:\n"
    message_text += f"‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
    message_text += f"‚Ä¢ –í—ã –Ω–µ–¥–∞–≤–Ω–æ –≤—Å—Ç—Ä–µ—á–∞–ª–∏—Å—å —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏\n\n"
    message_text += f"–ù–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–π–¥–µ–º –≤–∞–º "
    message_text += f"–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ! üòä\n\n"
    message_text += f"–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –≤ Random Coffee - —á–µ–º –±–æ–ª—å—à–µ "
    message_text += f"—É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, —Ç–µ–º –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤!"

    return message_text
