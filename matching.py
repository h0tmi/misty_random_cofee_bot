import random
import logging
from typing import List, Tuple, Optional
from datetime import datetime, timedelta

from models import User, ParticipationStatus
from database import Database

logger = logging.getLogger(__name__)

class MatchingService:
    def __init__(self, database: Database):
        self.db = database

    async def create_weekly_matches(self) -> List[Tuple[User, User]]:
        """–°–æ–∑–¥–∞—Ç—å –ø–∞—Ä—ã –¥–ª—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –º—ç—Ç—á–∏–Ω–≥–∞"""
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "–≤—Å–µ–≥–¥–∞ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å"
        always_participants = await self.db.get_users_by_participation_status(
            ParticipationStatus.ALWAYS
        )

        # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "—Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –∫–∞–∂–¥—ã–π —Ä–∞–∑"
        ask_participants = await self.db.get_users_by_participation_status(
            ParticipationStatus.ASK_EACH_TIME
        )

        # –î–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ "—Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –∫–∞–∂–¥—ã–π —Ä–∞–∑" —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ pending_matches
        await self._create_pending_matches(ask_participants)

        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—ã –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ "–≤—Å–µ–≥–¥–∞ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å"
        matches = await self._create_matches_from_users(always_participants)

        logger.info(f"–°–æ–∑–¥–∞–Ω–æ {len(matches)} –ø–∞—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º—ç—Ç—á–∏–Ω–≥–∞")
        logger.info(f"–°–æ–∑–¥–∞–Ω–æ {len(ask_participants)} –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—á–∞—Å—Ç–∏—è")

        return matches

    async def _create_pending_matches(self, users: List[User]):
        """–°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å–∏ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"""
        for user in users:
            await self.db.create_pending_match(user.user_id)

    async def _create_matches_from_users(self, users: List[User]) -> List[Tuple[User, User]]:
        """–°–æ–∑–¥–∞—Ç—å –ø–∞—Ä—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        if len(users) < 2:
            return []

        # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
        shuffled_users = users.copy()
        random.shuffle(shuffled_users)

        matches = []

        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—ã
        for i in range(0, len(shuffled_users) - 1, 2):
            user1 = shuffled_users[i]
            user2 = shuffled_users[i + 1]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∏ –ª–∏ —ç—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –ø–∞—Ä–µ –Ω–µ–¥–∞–≤–Ω–æ
            if not await self._were_matched_recently(user1.user_id, user2.user_id):
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                await self.db.create_match(user1.user_id, user2.user_id)
                matches.append((user1, user2))

        # –ï—Å–ª–∏ –æ—Å—Ç–∞–ª—Å—è –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫ —Å–ª—É—á–∞–π–Ω–æ–π –ø–∞—Ä–µ (–≥—Ä—É–ø–ø–∞ –∏–∑ 3 —á–µ–ª–æ–≤–µ–∫)
        if len(shuffled_users) % 2 == 1:
            if matches:
                last_user = shuffled_users[-1]
                # –î–æ–±–∞–≤–ª—è–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–∞—Ä–µ (—Å–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –∏–∑ 3 —á–µ–ª–æ–≤–µ–∫)
                random_match_index = random.randint(0, len(matches) - 1)
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {last_user.first_name} –¥–æ–±–∞–≤–ª–µ–Ω –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø–∞—Ä–µ (–≥—Ä—É–ø–ø–∞ –∏–∑ 3 —á–µ–ª–æ–≤–µ–∫)")

        return matches

    async def _were_matched_recently(self, user1_id: int, user2_id: int, days: int = 30) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –±—ã–ª–∏ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤ –ø–∞—Ä–µ –Ω–µ–¥–∞–≤–Ω–æ"""
        return await self.db.check_recent_match(user1_id, user2_id, days)

    async def process_pending_confirmations(self) -> List[User]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —É—á–∞—Å—Ç–∏–µ"""
        return await self.db.get_pending_participants()

    async def confirm_participation(self, user_id: int, wants_to_participate: bool):
        """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å —É—á–∞—Å—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if wants_to_participate:
            await self.db.confirm_pending_participation(user_id)
        else:
            await self.db.decline_pending_participation(user_id)

    async def create_matches_from_confirmed_participants(self) -> List[Tuple[User, User]]:
        """–°–æ–∑–¥–∞—Ç—å –ø–∞—Ä—ã –∏–∑ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–≤—à–∏—Ö —É—á–∞—Å—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        confirmed_users = await self.db.get_confirmed_participants()
        matches = await self._create_matches_from_users(confirmed_users)

        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É pending_matches –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä
        await self.db.clear_pending_matches()

        return matches

def format_user_profile(user: User) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    profile_text = f"üë§ –í–∞—à–∞ –ø–∞—Ä–∞ –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é:\n\n"
    profile_text += f"**{user.first_name}"

    if user.last_name:
        profile_text += f" {user.last_name}"

    if user.username:
        profile_text += f"** (@{user.username})"
    else:
        profile_text += "**"

    profile_text += f"\n\n"

    if user.bio:
        profile_text += f"üìù –û —Å–µ–±–µ: {user.bio}\n\n"

    if user.interests:
        profile_text += f"üéØ –ò–Ω—Ç–µ—Ä–µ—Å—ã: {user.interests}\n\n"

    profile_text += f"üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥—É –∏ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å –æ –≤—Å—Ç—Ä–µ—á–µ!\n"
    profile_text += f"‚òï –£–¥–∞—á–Ω–æ–≥–æ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞!"

    return profile_text
