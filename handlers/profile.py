from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import StateFilter

from database import Database
from models import User, ParticipationStatus
from keyboards import (
    get_profile_menu, get_main_menu, get_confirm_delete,
    get_participation_selection
)

router = Router()


class ProfileStates(StatesGroup):
    waiting_for_bio = State()
    waiting_for_interests = State()


class ForceProfileStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    waiting_for_bio = State()
    waiting_for_interests = State()
    waiting_for_participation_status = State()


@router.callback_query(F.data == "profile_menu")
async def profile_menu(callback: CallbackQuery):
    await callback.message.edit_text(
        "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç–æ–π:",
        reply_markup=get_profile_menu()
    )


@router.callback_query(F.data == "view_profile")
async def view_profile(callback: CallbackQuery, db: Database):
    user = await db.get_user(callback.from_user.id)

    if not user:
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã", show_alert=True)
        return

    profile_text = "üë§ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞:\n\n"
    profile_text += f"–ò–º—è: {user.first_name}"
    if user.last_name:
        profile_text += f" {user.last_name}"
    if user.username:
        profile_text += f" (@{user.username})"
    profile_text += "\n\n"

    if user.bio:
        profile_text += f"–û —Å–µ–±–µ: {user.bio}\n\n"

    if user.interests:
        profile_text += f"–ò–Ω—Ç–µ—Ä–µ—Å—ã: {user.interests}\n\n"

    status_text = {
        ParticipationStatus.ALWAYS: "‚úÖ –í—Å–µ–≥–¥–∞ —É—á–∞—Å—Ç–≤—É—é",
        ParticipationStatus.ASK_EACH_TIME: "‚ùì –°–ø—Ä–∞—à–∏–≤–∞—Ç—å –∫–∞–∂–¥—ã–π —Ä–∞–∑",
        ParticipationStatus.NEVER: "‚ùå –ù–µ —É—á–∞—Å—Ç–≤—É—é"
    }
    profile_text += (
        f"–°—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–∏—è: {status_text[user.participation_status]}"
    )

    await callback.message.edit_text(
        profile_text,
        reply_markup=get_profile_menu()
    )


@router.callback_query(F.data == "edit_profile")
async def start_edit_profile(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üìù –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ (–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):"
    )
    await state.set_state(ProfileStates.waiting_for_bio)


@router.message(StateFilter(ProfileStates.waiting_for_bio))
async def process_bio(message: Message, state: FSMContext):
    bio = None if message.text == "/skip" else message.text
    await state.update_data(bio=bio)

    await message.answer(
        "üéØ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ —Ö–æ–±–±–∏ "
        "(–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):"
    )
    await state.set_state(ProfileStates.waiting_for_interests)


@router.message(StateFilter(ProfileStates.waiting_for_interests))
async def process_interests(message: Message, state: FSMContext, db: Database):

    interests = None if message.text == "/skip" else message.text
    data = await state.get_data()

    user = User(
        user_id=message.from_user.id,
        username=message.from_user.username,
        first_name=message.from_user.first_name,
        last_name=message.from_user.last_name,
        bio=data.get('bio'),
        interests=interests,
        participation_status=ParticipationStatus.ASK_EACH_TIME
    )

    await db.create_or_update_user(user)
    await state.clear()

    await message.answer(
        "‚úÖ –ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞/–æ–±–Ω–æ–≤–ª–µ–Ω–∞!",
        reply_markup=get_main_menu()
    )


@router.callback_query(F.data == "delete_profile")
async def confirm_delete_profile(callback: CallbackQuery):
    await callback.message.edit_text(
        "‚ö†Ô∏è –í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ—é –∞–Ω–∫–µ—Ç—É?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=get_confirm_delete()
    )


@router.callback_query(F.data == "confirm_delete")
async def delete_profile(callback: CallbackQuery, db: Database):
    success = await db.delete_user(callback.from_user.id)

    if success:
        await callback.message.edit_text(
            "‚úÖ –ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.",
            reply_markup=get_main_menu()
        )
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–Ω–∫–µ—Ç—ã", show_alert=True)


# –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
async def force_create_profile(message: Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Random Coffee!\n\n"
        "–î–ª—è —É—á–∞—Å—Ç–∏—è –≤ –º—ç—Ç—á–∏–Ω–≥–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É.\n\n"
        "üìù –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ "
        "(–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):"
    )
    await state.set_state(ForceProfileStates.waiting_for_bio)


@router.message(StateFilter(ForceProfileStates.waiting_for_bio))
async def force_process_bio(message: Message, state: FSMContext):
    bio = None if message.text == "/skip" else message.text
    await state.update_data(bio=bio)

    await message.answer(
        "üéØ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ —Ö–æ–±–±–∏ "
        "(–∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip —á—Ç–æ–±—ã –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å):"
    )
    await state.set_state(ForceProfileStates.waiting_for_interests)


@router.message(StateFilter(ForceProfileStates.waiting_for_interests))
async def force_process_interests(message: Message, state: FSMContext):
    interests = None if message.text == "/skip" else message.text
    await state.update_data(interests=interests)

    await message.answer(
        "‚òï –ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –º—ç—Ç—á–∏–Ω–≥–µ?\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:",
        reply_markup=get_participation_selection()
    )
    await state.set_state(ForceProfileStates.waiting_for_participation_status)


@router.callback_query(
    F.data.startswith("force_participation_"),
    StateFilter(ForceProfileStates.waiting_for_participation_status)
)
async def force_process_participation_status(
    callback: CallbackQuery,
    state: FSMContext,
    db: Database
):
    data = await state.get_data()

    status_map = {
        "force_participation_always": ParticipationStatus.ALWAYS,
        "force_participation_ask": ParticipationStatus.ASK_EACH_TIME,
        "force_participation_never": ParticipationStatus.NEVER
    }

    participation_status = status_map[callback.data]

    user = User(
        user_id=callback.from_user.id,
        username=callback.from_user.username,
        first_name=callback.from_user.first_name,
        last_name=callback.from_user.last_name,
        bio=data.get('bio'),
        interests=data.get('interests'),
        participation_status=participation_status
    )

    await db.create_or_update_user(user)
    await state.clear()

    status_text = {
        ParticipationStatus.ALWAYS: "‚úÖ –í—Å–µ–≥–¥–∞ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å",
        ParticipationStatus.ASK_EACH_TIME: "‚ùì –°–ø—Ä–∞—à–∏–≤–∞—Ç—å –∫–∞–∂–¥—ã–π —Ä–∞–∑",
        ParticipationStatus.NEVER: "‚ùå –ù–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å"
    }

    await callback.message.edit_text(
        f"üéâ –ê–Ω–∫–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
        f"–°—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–∏—è: {status_text[participation_status]}\n\n"
        f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞:",
        reply_markup=get_main_menu()
    )
