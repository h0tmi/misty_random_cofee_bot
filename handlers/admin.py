import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.filters import Command

from config import load_config
from keyboards import (
    get_admin_menu,
    get_users_list_keyboard,
    get_back_to_admin,
    get_force_complete_confirmation
)
from models import ParticipationStatus
from database import Database

router = Router()
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –ø—Ä–∞–≤
config = load_config()


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º"""
    return user_id in config.admin_ids


@router.message(Command("admin"))
async def admin_command(message: Message):
    """–ê–¥–º–∏–Ω—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    await message.answer(
        "üîß –ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:",
        reply_markup=get_admin_menu()
    )


@router.callback_query(F.data == "admin_menu")
async def admin_menu_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω –º–µ–Ω—é"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await callback.message.edit_text(
        "üîß –ê–¥–º–∏–Ω—Å–∫–∞—è –ø–∞–Ω–µ–ª—å\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:",
        reply_markup=get_admin_menu()
    )
    await callback.answer()


@router.callback_query(F.data == "admin_users")
async def admin_users_callback(callback: CallbackQuery, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await _show_users_page(callback, db, page=0)


@router.callback_query(F.data.startswith("users_page_"))
async def users_page_callback(callback: CallbackQuery, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    page = int(callback.data.split("_")[-1])
    await _show_users_page(callback, db, page)


async def _show_users_page(callback: CallbackQuery, db, page: int = 0):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    page_size = 10
    offset = page * page_size

    try:
        users = await db.get_all_users(limit=page_size, offset=offset)
        total_users = await db.get_users_count()

        if not users and page > 0:
            # –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø—É—Å—Ç–∞—è, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            await _show_users_page(callback, db, page=0)
            return

        text = f"üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b> (–≤—Å–µ–≥–æ: {total_users})\n\n"

        if not users:
            text += "üì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞ –Ω–µ—Ç"
        else:
            for i, user in enumerate(users, start=offset + 1):
                status_emoji = {
                    ParticipationStatus.ALWAYS: "‚úÖ",
                    ParticipationStatus.ASK_EACH_TIME: "‚ùì",
                    ParticipationStatus.NEVER: "‚ùå"
                }.get(user.participation_status, "‚ùì")

                # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML —Å–∏–º–≤–æ–ª—ã –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                from html import escape
                first_name = escape(user.first_name or "")
                last_name = escape(user.last_name or "")
                username_text = (
                    f"@{escape(user.username)}" if user.username
                    else "–±–µ–∑ username"
                )
                active_text = "‚úÖ" if user.is_active else "‚ùå"

                created_date = (
                    user.created_at[:10] if user.created_at else '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
                )

                text += (
                    f"{i}. <b>{first_name}</b> "
                    f"{last_name}\n"
                    f"   ID: <code>{user.user_id}</code> | {username_text}\n"
                    f"   –£—á–∞—Å—Ç–∏–µ: {status_emoji} | –ê–∫—Ç–∏–≤–µ–Ω: {active_text}\n"
                    f"   –°–æ–∑–¥–∞–Ω: {created_date}\n\n"
                )

        await callback.message.edit_text(
            text,
            reply_markup=get_users_list_keyboard(total_users, page, page_size),
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            reply_markup=get_back_to_admin()
        )

    await callback.answer()


@router.callback_query(F.data == "admin_stats")
async def admin_stats_callback(callback: CallbackQuery, db: Database):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º—ç—Ç—á–∏–Ω–≥–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    try:
        stats = await db.get_matching_statistics()

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —É—á–∞—Å—Ç–∏—è
        participation_text = ""
        participation_stats = stats.get('participation_stats', {})

        status_names = {
            'always': '–í—Å–µ–≥–¥–∞ —É—á–∞—Å—Ç–≤—É—é—Ç',
            'ask_each_time': '–°–ø—Ä–∞—à–∏–≤–∞—Ç—å –∫–∞–∂–¥—ã–π —Ä–∞–∑',
            'never': '–ù–µ —É—á–∞—Å—Ç–≤—É—é—Ç'
        }

        for status, count in participation_stats.items():
            status_name = status_names.get(status, status)
            participation_text += f"‚Ä¢ {status_name}: {count}\n"

        if not participation_text:
            participation_text = "‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

        text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º—ç—Ç—á–∏–Ω–≥–∞</b>\n\n"

            "üë• <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_users']}\n"
            f"‚Ä¢ –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {stats['pending_users']}\n"
            f"‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —É—á–∞—Å—Ç–∏–µ: {stats['confirmed_users']}\n\n"

            "üéØ <b>–°—Ç–∞—Ç—É—Å—ã —É—á–∞—Å—Ç–∏—è:</b>\n"
            f"{participation_text}\n"

            "üí´ <b>–ú—ç—Ç—á–∏:</b>\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: {stats['total_matches']}\n"
            f"‚Ä¢ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π: {stats['recent_matches']}\n\n"

            f"üìÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}"
        )

        await callback.message.edit_text(
            text,
            reply_markup=get_back_to_admin(),
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏",
            reply_markup=get_back_to_admin()
        )

    await callback.answer()


@router.callback_query(F.data == "admin_manual_matching")
async def admin_manual_matching_callback(callback: CallbackQuery):
    """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –º—ç—Ç—á–∏–Ω–≥–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    await callback.message.edit_text(
        "üîÑ –ó–∞–ø—É—Å–∫–∞—é –º—ç—Ç—á–∏–Ω–≥...",
        reply_markup=get_back_to_admin()
    )

    # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    import shared
    scheduler = shared.get_scheduler()
    if scheduler:
        try:
            await scheduler.manual_start_matching()
            await callback.message.edit_text(
                "‚úÖ –ú—ç—Ç—á–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!",
                reply_markup=get_back_to_admin()
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º—ç—Ç—á–∏–Ω–≥–∞: {e}")
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –º—ç—Ç—á–∏–Ω–≥–∞: {str(e)}",
                reply_markup=get_back_to_admin()
            )
    else:
        await callback.message.edit_text(
            "‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
            reply_markup=get_back_to_admin()
        )

    await callback.answer()


@router.callback_query(F.data == "current_page")
async def current_page_callback(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É (–Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º)"""
    await callback.answer()


@router.callback_query(F.data == "admin_force_complete")
async def admin_force_complete_callback(callback: CallbackQuery, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞—Ç—á–∏–Ω–≥–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –º–∞—Ç—á–∏–Ω–≥–∞
    session = await db.get_current_matching_session()

    if not session:
        await callback.message.edit_text(
            "‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ –º–∞—Ç—á–∏–Ω–≥–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.",
            reply_markup=get_back_to_admin()
        )
        await callback.answer()
        return

    if session['status'] == 'collecting':
        await callback.message.edit_text(
            f"‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–∞—Ç—á–∏–Ω–≥–∞\n\n"
            f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: –°–±–æ—Ä —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤\n"
            f"–î–µ–¥–ª–∞–π–Ω: {session['deadline'][:16]}\n\n"
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –º–∞—Ç—á–∏–Ω–≥ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ? "
            f"–≠—Ç–æ —Å–æ–∑–¥–∞—Å—Ç –ø–∞—Ä—ã –∏–∑ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–≤—à–∏—Ö —É—á–∞—Å—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
            reply_markup=get_force_complete_confirmation()
        )
    else:
        await callback.message.edit_text(
            f"‚ùå –°–µ—Å—Å–∏—è –º–∞—Ç—á–∏–Ω–≥–∞ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n"
            f"–°—Ç–∞—Ç—É—Å: {session['status']}",
            reply_markup=get_back_to_admin()
        )

    await callback.answer()


@router.callback_query(F.data == "confirm_force_complete")
async def confirm_force_complete_callback(
    callback: CallbackQuery, db: Database
):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –º–∞—Ç—á–∏–Ω–≥–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    try:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
        success = await db.force_complete_matching_session()

        if success:
            # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä
            import shared
            scheduler = shared.get_scheduler()
            if scheduler:
                await scheduler.manual_create_confirmed_matches()

                await callback.message.edit_text(
                    "‚úÖ –ú–∞—Ç—á–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ!\n\n"
                    "–ü–∞—Ä—ã —Å–æ–∑–¥–∞–Ω—ã –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É—Å–ø–µ–ª–∏ "
                    "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–≤–æ–µ —É—á–∞—Å—Ç–∏–µ.",
                    reply_markup=get_back_to_admin()
                )
            else:
                await callback.message.edit_text(
                    "‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.",
                    reply_markup=get_back_to_admin()
                )
        else:
            await callback.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –º–∞—Ç—á–∏–Ω–≥. "
                "–í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏.",
                reply_markup=get_back_to_admin()
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –º–∞—Ç—á–∏–Ω–≥–∞: {e}")
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –º–∞—Ç—á–∏–Ω–≥–∞: {str(e)}",
            reply_markup=get_back_to_admin()
        )

    await callback.answer()