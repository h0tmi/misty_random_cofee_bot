from aiogram import Router, F
from aiogram.types import CallbackQuery
import logging

from database import Database
from keyboards import get_main_menu

router = Router()
logger = logging.getLogger(__name__)


@router.callback_query(F.data.startswith("feedback_met_"))
async def handle_meeting_confirmed(callback: CallbackQuery, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏"""
    try:
        match_id = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id

        success = await db.record_meeting_feedback(
            match_id, user_id, "meeting_confirmed"
        )

        if success:
            await callback.message.edit_text(
                "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! "
                "–†–∞–¥—ã, —á—Ç–æ –≤—Å—Ç—Ä–µ—á–∞ —Å–æ—Å—Ç–æ—è–ª–∞—Å—å.\n\n"
                "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º —É–ª—É—á—à–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–¥–±–æ—Ä–∞ –ø–∞—Ä –¥–ª—è "
                "—Å–ª–µ–¥—É—é—â–∏—Ö –º–∞—Ç—á–∏–Ω–≥–æ–≤. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è! ‚òï",
                reply_markup=get_main_menu()
            )
        else:
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_menu()
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu()
        )

    await callback.answer()


@router.callback_query(F.data.startswith("feedback_not_met_"))
async def handle_meeting_not_confirmed(callback: CallbackQuery, db: Database):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏"""
    try:
        match_id = int(callback.data.split("_")[-1])
        user_id = callback.from_user.id

        success = await db.record_meeting_feedback(
            match_id, user_id, "meeting_not_confirmed"
        )

        if success:
            await callback.message.edit_text(
                "üìù –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! "
                "–ñ–∞–ª—å, —á—Ç–æ –≤—Å—Ç—Ä–µ—á–∞ –Ω–µ —Å–æ—Å—Ç–æ—è–ª–∞—Å—å.\n\n"
                "–ú—ã —É—á—Ç–µ–º —ç—Ç–æ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –ø–æ–¥–±–æ—Ä–µ –ø–∞—Ä. "
                "–ù–∞–¥–µ–µ–º—Å—è, —á—Ç–æ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è! ü§û",
                reply_markup=get_main_menu()
            )
        else:
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏. "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=get_main_menu()
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏: {e}")
        await callback.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu()
        )

    await callback.answer()


@router.callback_query(F.data.startswith("feedback_later_"))
async def handle_feedback_later(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏"""
    await callback.message.edit_text(
        "‚è∞ –•–æ—Ä–æ—à–æ, –º—ã –Ω–∞–ø–æ–º–Ω–∏–º –≤–∞–º –æ –≤—Å—Ç—Ä–µ—á–µ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π.\n\n"
        "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —ç—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é –ø–æ–∑–∂–µ –∏ "
        "–æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.",
        reply_markup=get_main_menu()
    )
    await callback.answer()