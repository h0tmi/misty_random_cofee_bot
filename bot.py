import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.storage.memory import MemoryStorage

from config import load_config
from database import Database
from keyboards import get_main_menu
from scheduler import MatchingScheduler
from handlers import profile, participation, matching

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
config = load_config()
bot = Bot(token=config.bot_token)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–µ–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
db = Database(config.database_path)

# –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
scheduler = MatchingScheduler(bot, db)

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤
dp.include_router(profile.router)
dp.include_router(participation.router)
dp.include_router(matching.router)

@dp.message(CommandStart())
async def start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
        f"–Ø –±–æ—Ç –¥–ª—è Random Coffee - –ø–æ–º–æ–≥–∞—é –ª—é–¥—è–º –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –∏ –æ–±—â–∞—Ç—å—Å—è –∑–∞ —á–∞—à–∫–æ–π –∫–æ—Ñ–µ ‚òï\n\n"
        f"–ß—Ç–æ —è —É–º–µ—é:\n"
        f"‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∞–Ω–∫–µ—Ç–∞–º–∏\n"
        f"‚Ä¢ –ü–æ–¥–±–∏—Ä–∞—Ç—å –ø–∞—Ä—ã –¥–ª—è –≤—Å—Ç—Ä–µ—á –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é\n"
        f"‚Ä¢ –£–ø—Ä–∞–≤–ª—è—Ç—å —É—á–∞—Å—Ç–∏–µ–º –≤ –º—ç—Ç—á–∏–Ω–≥–µ\n\n"
        f"üóì –ú—ç—Ç—á–∏–Ω–≥ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫!\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_menu()
    )

@dp.message(Command("help"))
async def help_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
ü§ñ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:

/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

üìù –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:
1. –°–æ–∑–¥–∞–π—Ç–µ –∞–Ω–∫–µ—Ç—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–µ–±–µ
2. –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–∏—è
3. –ñ–¥–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞—Ö!

üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –º—ç—Ç—á–∏–Ω–≥–∞:
‚Ä¢ –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ 10:00 - –Ω–∞—á–∞–ª–æ –º—ç—Ç—á–∏–Ω–≥–∞
‚Ä¢ –í—Ç–æ—Ä–Ω–∏–∫ 10:00 - —Å–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä –∏–∑ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–≤—à–∏—Ö —É—á–∞—Å—Ç–∏–µ

–°—Ç–∞—Ç—É—Å—ã —É—á–∞—Å—Ç–∏—è:
‚Ä¢ ‚úÖ –í—Å–µ–≥–¥–∞ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É—á–∞—Å—Ç–∏–µ –≤ –º—ç—Ç—á–∏–Ω–≥–µ
‚Ä¢ ‚ùì –°–ø—Ä–∞—à–∏–≤–∞—Ç—å –∫–∞–∂–¥—ã–π —Ä–∞–∑ - –±–æ—Ç –±—É–¥–µ—Ç —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –º—ç—Ç—á–∏–Ω–≥–æ–º
‚Ä¢ ‚ùå –ù–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å - –æ—Ç–∫–ª—é—á–∏—Ç—å —É—á–∞—Å—Ç–∏–µ
    """
    await message.answer(help_text)

@dp.message(Command("menu"))
async def menu_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu"""
    await message.answer(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu()
    )

# –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
@dp.message(Command("start_matching"))
async def manual_start_matching(message: Message):
    """–†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –º—ç—Ç—á–∏–Ω–≥–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if message.from_user.id not in config.admin_ids:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    await message.answer("üîÑ –ó–∞–ø—É—Å–∫–∞—é –º—ç—Ç—á–∏–Ω–≥...")
    await scheduler.manual_start_matching()
    await message.answer("‚úÖ –ú—ç—Ç—á–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω!")

@dp.message(Command("create_confirmed_matches"))
async def manual_create_confirmed_matches(message: Message):
    """–†—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ä (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
    if message.from_user.id not in config.admin_ids:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return

    await message.answer("üîÑ –°–æ–∑–¥–∞—é –ø–∞—Ä—ã –∏–∑ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–≤—à–∏—Ö —É—á–∞—Å—Ç–∏–µ...")
    await scheduler.manual_create_confirmed_matches()
    await message.answer("‚úÖ –ü–∞—Ä—ã —Å–æ–∑–¥–∞–Ω—ã!")

@dp.callback_query(lambda c: c.data == "main_menu")
async def main_menu_callback(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.message.edit_text(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu()
    )

# Middleware –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ database –≤ —Ö–µ–Ω–¥–ª–µ—Ä—ã
class DatabaseMiddleware:
    def __init__(self, database: Database):
        self.database = database

    async def __call__(self, handler, event, data):
        data['db'] = self.database
        return await handler(event, data)

async def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ event loop
        await db.init_db()

        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware
        db_middleware = DatabaseMiddleware(db)
        dp.message.middleware(db_middleware)
        dp.callback_query.middleware(db_middleware)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        scheduler.start()

        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        logger.info("üìÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –º—ç—Ç—á–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–µ–Ω")

        await dp.start_polling(bot)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
    finally:
        scheduler.stop()
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
